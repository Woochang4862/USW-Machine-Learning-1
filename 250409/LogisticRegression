{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPTS94wW6tpxQgh/rAaGpIH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"ZF-ktzGrZsn0","executionInfo":{"status":"ok","timestamp":1744182979107,"user_tz":-540,"elapsed":367,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"eaf99e55-4a16-4379-96f3-88e4a75a82a4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","z = np.arange(-5,5,0.1)\n","phi = 1/(1+np.exp(-z))\n","plt.plot(z,phi)\n","plt.xlabel('z')\n","plt.ylabel('$\\phi(z)$')\n","plt.show()"]},{"cell_type":"code","source":["import pandas as pd\n","fish = pd.read_csv(\"https://bit.ly/fish_csv_data\")\n","fish.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"OH7HlTeJaCe0","executionInfo":{"status":"ok","timestamp":1744183045048,"user_tz":-540,"elapsed":340,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"ee7fc545-fb1e-445d-c6a0-cb478cef46a3"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Species  Weight  Length  Diagonal   Height   Width\n","0   Bream   242.0    25.4      30.0  11.5200  4.0200\n","1   Bream   290.0    26.3      31.2  12.4800  4.3056\n","2   Bream   340.0    26.5      31.1  12.3778  4.6961\n","3   Bream   363.0    29.0      33.5  12.7300  4.4555\n","4   Bream   430.0    29.0      34.0  12.4440  5.1340"],"text/html":["\n","  <div id=\"df-2270d014-373f-499e-b549-6ee520c28e32\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Species</th>\n","      <th>Weight</th>\n","      <th>Length</th>\n","      <th>Diagonal</th>\n","      <th>Height</th>\n","      <th>Width</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Bream</td>\n","      <td>242.0</td>\n","      <td>25.4</td>\n","      <td>30.0</td>\n","      <td>11.5200</td>\n","      <td>4.0200</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bream</td>\n","      <td>290.0</td>\n","      <td>26.3</td>\n","      <td>31.2</td>\n","      <td>12.4800</td>\n","      <td>4.3056</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Bream</td>\n","      <td>340.0</td>\n","      <td>26.5</td>\n","      <td>31.1</td>\n","      <td>12.3778</td>\n","      <td>4.6961</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Bream</td>\n","      <td>363.0</td>\n","      <td>29.0</td>\n","      <td>33.5</td>\n","      <td>12.7300</td>\n","      <td>4.4555</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Bream</td>\n","      <td>430.0</td>\n","      <td>29.0</td>\n","      <td>34.0</td>\n","      <td>12.4440</td>\n","      <td>5.1340</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2270d014-373f-499e-b549-6ee520c28e32')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2270d014-373f-499e-b549-6ee520c28e32 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2270d014-373f-499e-b549-6ee520c28e32');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-212f73ea-c5d4-4b4e-a079-176aab4967e9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-212f73ea-c5d4-4b4e-a079-176aab4967e9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-212f73ea-c5d4-4b4e-a079-176aab4967e9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fish","summary":"{\n  \"name\": \"fish\",\n  \"rows\": 159,\n  \"fields\": [\n    {\n      \"column\": \"Species\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Bream\",\n          \"Roach\",\n          \"Pike\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 357.9783165508931,\n        \"min\": 0.0,\n        \"max\": 1650.0,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          770.0,\n          51.5,\n          197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.716328098884247,\n        \"min\": 8.4,\n        \"max\": 63.4,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          14.7,\n          18.8,\n          19.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diagonal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.610245832690964,\n        \"min\": 8.8,\n        \"max\": 68.0,\n        \"num_unique_values\": 124,\n        \"samples\": [\n          39.2,\n          27.2,\n          23.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.286207619968867,\n        \"min\": 1.7284,\n        \"max\": 18.957,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          15.438,\n          7.293,\n          2.8728\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.6858038699921671,\n        \"min\": 1.0476,\n        \"max\": 8.142,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          3.1571,\n          1.3936,\n          3.6835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","fish_input = fish[['Weight','Length','Diagonal','Height','Width']].to_numpy()\n","fish_target = fish['Species'].to_numpy()\n","train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state=42)"],"metadata":{"id":"Hrguq11baSl2","executionInfo":{"status":"ok","timestamp":1744183088112,"user_tz":-540,"elapsed":23,"user":{"displayName":"정우창","userId":"00584798447664341188"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["bream_smelt_indexes = (train_target == 'Bream') | (train_target == 'Smelt')\n","train_bream_smelt = train_input[bream_smelt_indexes]\n","target_bream_smelt = train_target[bream_smelt_indexes]"],"metadata":{"id":"zTvfEx5vadLs","executionInfo":{"status":"ok","timestamp":1744183096739,"user_tz":-540,"elapsed":8,"user":{"displayName":"정우창","userId":"00584798447664341188"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()\n","lr.fit(train_bream_smelt, target_bream_smelt)\n","print(lr.predict(train_bream_smelt[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jRaotw6pafSy","executionInfo":{"status":"ok","timestamp":1744183139656,"user_tz":-540,"elapsed":35,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"b5272654-b881-4895-d126-2003837146d9"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Smelt' 'Bream' 'Bream' 'Bream']\n"]}]},{"cell_type":"code","source":["print(lr.predict_proba(train_bream_smelt[:5]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SyLCdapfapw4","executionInfo":{"status":"ok","timestamp":1744183148138,"user_tz":-540,"elapsed":19,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"ced057c9-aa91-4828-feca-0a67c6633828"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1.00000000e+00 2.60996859e-20]\n"," [3.19842832e-05 9.99968016e-01]\n"," [1.00000000e+00 6.09732809e-17]\n"," [1.00000000e+00 6.84924114e-13]\n"," [1.00000000e+00 4.12567879e-20]]\n"]}]},{"cell_type":"code","source":["print(lr.classes_)\n","print(lr.coef_, lr.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1phkpc92ar1h","executionInfo":{"status":"ok","timestamp":1744183206259,"user_tz":-540,"elapsed":11,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"d4c65081-6a5d-44fa-a21f-78c1f76c1b1e"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["['Bream' 'Smelt']\n","[[-0.07747695 -0.00374632 -0.00362588 -0.0024152  -0.00174057]] [11.01948949]\n"]}]},{"cell_type":"code","source":["decisions = lr.decision_function(train_bream_smelt[:5]) # z 값 (sigmoid 의 입력) 확인\n","print(decisions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hy4LWVtha1pw","executionInfo":{"status":"ok","timestamp":1744183316240,"user_tz":-540,"elapsed":40,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"abb5836e-d85b-41fc-c45b-5746bc283ecd"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["[-45.09236367  10.35023394 -37.33609592 -28.00946835 -44.6344713 ]\n"]}]},{"cell_type":"code","source":["from scipy.special import expit\n","print(expit(decisions)) # sigmoid 함수의 출력 확인"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PKuVwhMEa-EL","executionInfo":{"status":"ok","timestamp":1744183384354,"user_tz":-540,"elapsed":9,"user":{"displayName":"정우창","userId":"00584798447664341188"}},"outputId":"c156e8fe-47e7-43d2-c5f6-0755a9979d84"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[2.60996859e-20 9.99968016e-01 6.09732809e-17 6.84924114e-13\n"," 4.12567879e-20]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"BIjEKAKIbA7n"},"execution_count":null,"outputs":[]}]}